; stream model implementations
(define (stream-cons a b)
  (cons a (delay b)))
(define (stream-car stream)
  (car stream))
(define (stream-cdr stream)
  (force (cdr stream)))
(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
(define (streamp-map proc s)
  (if (stream-null? s)
      the-empty-stream
      (stream-cons (proc (stream-car s)) (stream-map proc (stream-cdr s)))))
(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))
(define (stream-display s)
  (stream-for-each displayline s))
(define (display-line x)
  (newline)
  (display x))
(define (memo-proc proc)
  (let ((already-run? false) (result false))
    (lambda ()
      (if (not already-run?)
          (begin (set! result (proc))
                 (set! already-run? true)
                 result)
          result))))
(define (delay exp)
  (memo-proc (lambda () exp)))
(define (force delayed-object)
  (delayed-object))